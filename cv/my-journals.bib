@article{benelallamDistributingRelationalModel2018,
  title = {Distributing Relational Model Transformation on {{MapReduce}}},
  author = {Benelallam, Amine and G{\'o}mez, Abel and Tisi, Massimo and Cabot, Jordi},
  year = {2018},
  month = aug,
  journal = {Journal of Systems and Software},
  volume = {142},
  pages = {1--20},
  issn = {01641212},
  doi = {10.1016/j.jss.2018.04.014},
  urldate = {2022-05-07},
  abstract = {MDE has been successfully adopted in the production of software for several domains. As the models that need to be handled in MDE grow in scale, it becomes necessary to design scalable algorithms for model transformation (MT) as well as suitable frameworks for storing and retrieving models efficiently. One way to cope with scalability is to exploit the wide availability of distributed clusters in the Cloud for the parallel execution of MT. However, because of the dense interconnectivity of models and the complexity of transformation logic, the efficient use of these solutions in distributed model processing and persistence is not trivial.},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {ATL,atlmr,Distributed Computing,MapReduce,Model Transformation,my-journal,NeoEMF},
  file = {/Users/max/Zotero/storage/DZQLNX93/Benelallam et al. - 2018 - Distributing relational model transformation on Ma.pdf}
}

@article{berrouyneModelDrivenMethodologyAccelerate2022,
  title = {A {{Model-Driven Methodology}} to {{Accelerate Software Engineering}} in the {{Internet}} of {{Things}}},
  author = {Berrouyne, Imad and Adda, Mehdi and Mottu, Jean-Marie and Tisi, Massimo},
  year = {2022},
  month = oct,
  journal = {IEEE Internet of Things Journal},
  volume = {9},
  number = {20},
  pages = {19757--19772},
  publisher = {{IEEE}},
  doi = {10.1109/JIOT.2022.3170500},
  urldate = {2023-01-07},
  copyright = {All rights reserved},
  keywords = {Code Generation,Internet of Things,Model Transformation,Model-Driven Engineering,my-journal,Policy Enforcement,Software Engineering},
  file = {/Users/max/Zotero/storage/9WV5MCDR/Berrouyne et al. - 2022 - A Model-Driven Methodology to Accelerate Software .pdf}
}

@article{bezierslafosseSourceCodeLevelRegression2019,
  title = {Source-{{Code Level Regression Test Selection}}: The {{Model-Driven Way}}.},
  shorttitle = {Source-{{Code Level Regression Test Selection}}},
  author = {{B{\'e}ziers la Fosse}, Thibault and Mottu, Jean-Marie and Tisi, Massimo and Suny{\'e}, Suny{\'e}},
  year = {2019},
  journal = {The Journal of Object Technology},
  volume = {18},
  number = {2},
  pages = {13:1},
  issn = {1660-1769},
  doi = {10.5381/jot.2019.18.2.a13},
  urldate = {2022-05-07},
  abstract = {In order to ensure that existing functionalities have not been impacted by recent program changes, test cases are regularly executed during regression testing (RT) phases. The RT time becomes problematic as the number of test cases is growing. Regression test selection (RTS) aims at running only the test cases that have been impacted by recent changes. RTS reduces the duration of regression testing and hence its cost. In this paper, we present a model-driven approach for RTS. Execution traces are gathered at runtime, and injected in a static source-code model. We use this resulting model to identify and select all the test cases that have been impacted by changes between two revisions of the program. Our MDE approach allows modularity in the granularity of changes considered. In addition, it offers better reusability than existing RTS techniques: the trace model is persistent and standardised. Furthermore, it enables more interoperability with other model-driven tools, enabling further analysis at different levels of abstraction (e.g. energy consumption).},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {Execution Trace,Model Driven Engineering,my-journal,Regression Test Selection,Regression Testing,testing},
  file = {/Users/max/Zotero/storage/DSJMKSRW/BÃ©ziers la Fosse et al. - 2019 - Source-Code Level Regression Test Selection the M.pdf}
}

@article{bucchiaroneWhatFutureModeling2021,
  title = {What {{Is}} the {{Future}} of {{Modeling}}?},
  author = {Bucchiarone, Antonio and Ciccozzi, Federico and Lambers, Leen and Pierantonio, Alfonso and Tichy, Matthias and Tisi, Massimo and Wortmann, Andreas and Zaytsev, Vadim},
  year = {2021},
  month = mar,
  journal = {IEEE Software},
  volume = {38},
  number = {2},
  pages = {119--127},
  issn = {0740-7459, 1937-4194},
  doi = {10.1109/MS.2020.3041522},
  urldate = {2022-12-30},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {low-code,my-journal,Research Roadmap,Software Modelling,Success Stories},
  file = {/Users/max/Zotero/storage/AGGF46PL/Bucchiarone et al. - 2021 - What is the Future of Modelling .pdf;/Users/max/Zotero/storage/NUN8U89P/Bucchiarone et al. - 2021 - What Is the Future of Modeling.pdf}
}

@article{Cabot2011,
  title = {The {{MDE}} Diploma: First International Postgraduate Specialization in Model-Driven Engineering},
  author = {Cabot, J and Tisi, M},
  year = {2011},
  journal = {Computer Science Education},
  volume = {23},
  doi = {10.1080/0899340YYxxxxxxxx},
  urldate = {2014-09-15},
  copyright = {All rights reserved},
  keywords = {bloom,learning progression,mastery,mde,my-journal,neo-piagetian,proficiency,programming fundamentals},
  file = {/Users/max/Zotero/storage/ANHJU78P/Cabot, Tisi - 2011 - The MDE diploma first international postgraduate specialization in model-driven engineering.pdf}
}

@article{chengCoqTLCoqDSL2020,
  title = {{{CoqTL}}: A {{Coq DSL}} for Rule-Based Model Transformation},
  shorttitle = {{{CoqTL}}},
  author = {Cheng, Zheng and Tisi, Massimo and Douence, R{\'e}mi},
  year = {2020},
  month = mar,
  journal = {Software and Systems Modeling},
  volume = {19},
  number = {2},
  pages = {425--439},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-019-00765-6},
  urldate = {2020-05-13},
  abstract = {In model-driven engineering, model transformation (MT) verification is essential for reliably producing software artifacts. While recent advancements have enabled automatic Hoare-style verification for non-trivial MTs, there are certain verification tasks (e.g. induction) that are intrinsically difficult to automate. Existing tools that aim at simplifying the interactive verification of MTs typically translate the MT specification (e.g. in ATL) and properties to prove (e.g. in OCL) into an interactive theorem prover. However, since the MT specification and proof phases happen in separate languages, the proof developer needs a detailed knowledge of the translation logic. Naturally, any error in the MT translation could cause unsound verification, i.e. the MT executed in the original environment may have different semantics from the verified MT.},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {c2r,coqtl,my-journal},
  file = {/Users/max/Zotero/storage/XL75YULH/Cheng et al. - 2020 - CoqTL a Coq DSL for rule-based model transformati.pdf}
}

@article{chengDeepSpecificationProof2022,
  title = {Deep Specification and Proof Preservation for the {{CoqTL}} Transformation Language},
  author = {Cheng, Zheng and Tisi, Massimo},
  year = {2022},
  month = may,
  journal = {Software and Systems Modeling},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-022-01004-1},
  urldate = {2022-05-07},
  abstract = {Executable engines for relational model-transformation languages evolve continuously because of language extension, performance improvement and bug fixes. While new versions generally change the engine semantics, end-users expect to get backward-compatibility guarantees, so that existing transformations do not need to be adapted at every engine update.},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {c2r,Certification,Coq,coqtl,MDE,Model Transformation,my-journal,Programming Language Implementation,Theorem Proving},
  file = {/Users/max/Zotero/storage/8CYVSIU8/Cheng and Tisi - 2022 - Deep specification and proof preservation for the .pdf}
}

@article{chengSlicingATLModel2018,
  title = {Slicing {{ATL}} Model Transformations for Scalable Deductive Verification and Fault Localization},
  author = {Cheng, Zheng and Tisi, Massimo},
  year = {2018},
  month = nov,
  journal = {International Journal on Software Tools for Technology Transfer},
  volume = {20},
  number = {6},
  pages = {645--663},
  issn = {1433-2779, 1433-2787},
  doi = {10.1007/s10009-018-0491-8},
  urldate = {2022-05-07},
  abstract = {Model-driven engineering (MDE) is increasingly accepted in industry as an effective approach for managing the full life cycle of software development. In MDE, software models are manipulated, evolved and translated by model transformations (MT), up to code generation. Automatic deductive verification techniques have been proposed to guarantee that transformations satisfy correctness requirements (encoded as transformation contracts). However, to be transferable to industry, these techniques need to be scalable and provide the user with easily accessible feedback.},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {my-journal,veriatl},
  file = {/Users/max/Zotero/storage/3JV43HJ6/Cheng and Tisi - 2018 - Slicing ATL model transformations for scalable ded.pdf}
}

@article{danielNeoEMFMultidatabaseModel2017,
  title = {{{NeoEMF}}: {{A}} Multi-Database Model Persistence Framework for Very Large Models},
  shorttitle = {{{NeoEMF}}},
  author = {Daniel, Gwendal and Suny{\'e}, Gerson and Benelallam, Amine and Tisi, Massimo and Vernageau, Yoann and G{\'o}mez, Abel and Cabot, Jordi},
  year = {2017},
  month = dec,
  journal = {Science of Computer Programming},
  volume = {149},
  pages = {9--14},
  issn = {01676423},
  doi = {10.1016/j.scico.2017.08.002},
  urldate = {2020-02-24},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {my-journal,neoemf},
  file = {/Users/max/Zotero/storage/I26R8KJI/Daniel et al. - 2017 - NeoEMF A multi-database model persistence framewo.pdf}
}

@article{dehghaniFacilitatingMigrationMicroservice2022,
  title = {Facilitating the {{Migration}} to the {{Microservice Architecture}} via {{Model-Driven Reverse Engineering}} and {{Reinforcement Learning}}},
  author = {Dehghani, Mohammadhadi and {Kolahdouz-Rahimi}, Shekoufeh and Tisi, Massimo and Tamzalit, Dalila},
  year = {2022},
  month = jun,
  journal = {Software and Systems Modeling},
  volume = {21},
  number = {3},
  pages = {1115--1133},
  publisher = {{Springer Verlag}},
  doi = {10.1007/s10270-022-00977-3},
  urldate = {2023-01-07},
  copyright = {All rights reserved},
  keywords = {Microservice Architecture,Migration,Model-Driven Reverse Engineering,my-journal,Reinforcement Learning},
  file = {/Users/max/Zotero/storage/PAJXWEYJ/Dehghani et al. - 2022 - Facilitating the Migration to the Microservice Arc.pdf}
}

@article{diruscioLowcodeDevelopmentModeldriven2022,
  title = {Low-Code Development and Model-Driven Engineering: {{Two}} Sides of the Same Coin?},
  shorttitle = {Low-Code Development and Model-Driven Engineering},
  author = {Di~Ruscio, Davide and Kolovos, Dimitris and {de Lara}, Juan and Pierantonio, Alfonso and Tisi, Massimo and Wimmer, Manuel},
  year = {2022},
  month = apr,
  journal = {Software and Systems Modeling},
  volume = {21},
  number = {2},
  pages = {437--446},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-021-00970-2},
  urldate = {2022-12-30},
  abstract = {The last few years have witnessed a significant growth of so-called low-code development platforms (LCDPs) both in gaining traction on the market and attracting interest from academia. LCDPs are advertised as visual development platforms, typically running on the cloud, reducing the need for manual coding and also targeting non-professional programmers. Since LCDPs share many of the goals and features of model-driven engineering approaches, it is a common point of debate whether lowcode is just a new buzzword for model-driven technologies, or whether the two terms refer to genuinely distinct approaches. To contribute to this discussion, in this expert-voice paper, we compare and contrast low-code and model-driven approaches, identifying their differences and commonalities, analysing their strong and weak points, and proposing directions for crosspollination.},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {low-code,Low-code development,Model-driven engineering,my-journal,No-code development},
  file = {/Users/max/Zotero/storage/F89W63Q8/DiÂ Ruscio et al. - 2022 - Low-code development and model-driven engineering.pdf}
}

@article{Ed-Douibi2015,
  title = {{{EMF-REST Generation}} of {{RESTful APIs}} from {{Models}}},
  author = {{Ed-Douibi}, Hamza and Izquierdo, J.L.C. Javier Luis C{\'a}novas and G?mez, A. and Tisi, Massimo and Cabot, Jordi and G{\'o}mez, Abel and Tisi, Massimo and Cabot, Jordi},
  year = {2015},
  journal = {Proceedings of the ACM Symposium on Applied Computing},
  volume = {abs/1504.0},
  pages = {39--43},
  doi = {10.1145/2851613.2851782},
  abstract = {In the last years, there has been an increasing interest for Model-Driven Engineering (MDE) solutions in the Web. Web-based modeling solutions can leverage on better support for distributed management (i.e., the Cloud) and collaboration. However, current modeling environments and frameworks are usually restricted to desktop-based scenarios and therefore their capabilities to move to the Web are still very limited. In this paper we present an approach to generate Web APIs out of models, thus paving the way for managing models and collaborating on them online. The approach, called EMF-REST, takes Eclipse Modeling Framework (EMF) data models as input and generates Web APIs following the REST principles and relying on well-known libraries and standards, thus facilitating its comprehension and maintainability. Also, EMF-REST integrates model and Web-specific features to provide model validation and security capabilities, respectively, to the generated API.},
  copyright = {All rights reserved},
  isbn = {9781450337397},
  keywords = {[Domain-specific languages,all or part of,domain-specific languages,emf,EMF,mde,Model-Driven Engi,model-driven engineering,model-driven web engineering,my-journal,or hard copies of,permission to make digital,rest,this work for},
  file = {/Users/max/Zotero/storage/YNGKCS7M/Ed-Douibi et al. - 2015 - EMF-REST Generation of RESTful APIs from Models.pdf}
}

@article{enetProtocolBasedInteractiveDebugging2023,
  title = {Protocol-{{Based Interactive Debugging}} for {{Domain-Specific Languages}}},
  author = {Enet, Josselin and Bousse, Erwan and Tisi, Massimo and Suny{\'e}, Gerson},
  year = {2023},
  journal = {The Journal of Object Technology},
  volume = {22},
  number = {2},
  urldate = {2023-06-21},
  abstract = {Interactive debuggers are established tools used by developers to understand programs and localize faults. They are equally valuable in the context of model-driven development, when working on executable behavioral models. However, development costs of interactive debuggers for Domain-Specific Languages (DSLs) can be significant. In order to mitigate these costs, several reusable DSL-agnostic debugging solutions have been proposed. We argue that the applicability of these solutions is limited by being tied to a fixed set of debugging services, a specific language engineering approach, or a particular user interface. In this paper, we present a novel approach to provide interactive debugging services for executable DSLs through a reusable generic architecture. We propose a protocol allowing a generic interactive debugger to communicate with heterogeneous DSL runtimes, both for controlling the execution and for configuring the debugger with domain-specific breakpoints. The proposed debugger can itself be controlled using a reinterpretation of the Debug Adapter Protocol (DAP), for an effortless integration in existing Integrated Development Environments (IDEs) that support it. Using a prototype implementation based on JSON-RPC and two heterogeneous DSL runtimes, we show that our approach provides an off-the-shelf reusable interactive debugger that supports meaningful domain-specific breakpoints, and that can be used with minimal effort within an IDE such as Visual Studio Code.},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {my-journal}
}

@article{Fraternali2011,
  title = {Using Traceability Links and Higher-Order Transformations for Easing Regression Testing of Web Applications},
  author = {Fraternali, Piero and Tisi, Massimo},
  year = {2011},
  journal = {Journal of Web Engineering},
  volume = {10},
  number = {1},
  pages = {1--20},
  issn = {15409589},
  abstract = {For Model-Driven Engineering to become widely accepted by developers, it is necessary that its principles and techniques be applied not only to the generation of code from Plat- form Independent Models (PIMs), but more generally to all the phases of the software life-cycle. This paper focuses on the use of PIMs to support automation in the regression testing phase of a system; the proposed framework lets developers record and replay testing sessions and investigate testing failures at the level of their PIMs; this is made possible by traceability links automatically weaved into the generated code, whereby developers can follow application execution at the model level. Such traceability links are created by a modified version of the code generation transformation, automatically produced by means of a Higher-Order Transformation (HOT). A HOT is a transformation that takes as input a transformation (the original code generator) and creates another transformation (the code generator capable of producing traceability links). The HOT weaves into the code generator additional rules producing traceability clues that help developers link any error to the model features likely to cause it. This approach is particularly helpful in the Web context, where code generation transformations must follow changes in the technology and presentation styles. Using HOTs ensures the automatic evolution of the transformation for traceability links when the code generation transformation changes. \&copy; Rinton Press.},
  copyright = {All rights reserved},
  keywords = {Automation,Life cycle,Models,my-journal,Network components,Pr,web},
  file = {/Users/max/Zotero/storage/KMU3Q5JL/Fraternali, Tisi - 2011 - Using Traceability Links and Higher Order Transformations for Easying Regression Testing of Web Applications.pdf}
}

@article{Hidaka2016,
  title = {Feature-Based Classification of Bidirectional Transformation Approaches},
  author = {Hidaka, Soichiro and Tisi, Massimo and Cabot, Jordi and Hu, Zhenjiang},
  year = {2016},
  journal = {Software and Systems Modeling},
  volume = {15},
  number = {3},
  pages = {907--928},
  issn = {16191374},
  doi = {10.1007/s10270-014-0450-0},
  abstract = {Bidirectional model transformation is a key technology in model-driven engineering (MDE), when two models that can change over time have to be kept constantly consistent with each other. While several model transformation tools include at least a partial support to bidirectionality, it is not clear how these bidirectional capabilities relate to each other and to similar classical problems in computer science, from the view update problem in databases to bidirectional graph transformations. This paper tries to clarify and visualize the space of design choices for bidirectional transformations from an MDE point of view, in the form of a feature model. The selected list of existing approaches are characterized by mapping them to the feature model. Then, the feature model is used to highlight some unexplored research lines in bidirectional transformations.},
  copyright = {All rights reserved},
  keywords = {atlgt,Bidirectional transformation,Domain analysis,Feature model,my-journal,no-example},
  file = {/Users/max/Zotero/storage/TKMN45PA/Hidaka et al. - 2016 - Feature-based classification of bidirectional transformation approaches.pdf}
}

@article{hinkelCrosstechnologyBenchmarkIncremental2022,
  title = {A Cross-Technology Benchmark for Incremental Graph Queries},
  author = {Hinkel, Georg and {Garcia-Dominguez}, Antonio and Sch{\"o}ne, Ren{\'e} and Boronat, Artur and Tisi, Massimo and Le Calvar, Th{\'e}o and Jouault, Frederic and Marton, J{\'o}zsef and Ny{\'i}ri, Tam{\'a}s and Antal, J{\'a}nos Benjamin and Elekes, M{\'a}rton and Sz{\'a}rnyas, G{\'a}bor},
  year = {2022},
  month = apr,
  journal = {Software and Systems Modeling},
  volume = {21},
  number = {2},
  pages = {755--804},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-021-00927-5},
  urldate = {2022-05-07},
  abstract = {To cope with the increased complexity of systems, models are used to capture what is considered the essence of a system. Such models are typically represented as a graph, which is queried to gain insight into the modelled system. Often, the results of these queries need to be adjusted according to updated requirements and are therefore a subject of maintenance activities. It is thus necessary to support writing model queries with adequate languages. However, in order to stay meaningful, the analysis results need to be refreshed as soon as the underlying models change. Therefore, a good execution speed is mandatory in order to cope with frequent model changes. In this paper, we propose a benchmark to assess model query technologies in the presence of model change sequences in the domain of social media. We present solutions to this benchmark in a variety of 11 different tools and compare them with respect to explicitness of incrementalization, asymptotic complexity and performance.},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {case-study,my-journal},
  file = {/Users/max/Zotero/storage/L4R28M97/Hinkel et al. - 2022 - A cross-technology benchmark for incremental graph.pdf}
}

@article{Kolovos2015,
  title = {{{MONDO}}: {{Scalable Modelling}} and Model Management on the Cloud},
  author = {Kolovos, D.S. and Rose, L.M. and Paige, R.F. and Guerra, E. and Cuadrado, J.S. and De Lara, J. and R?th, I. and Varr?, D. and Suny?, G. and Tisi, M.},
  year = {2015},
  journal = {CEUR Workshop Proceedings},
  volume = {1400},
  issn = {16130073},
  abstract = {Achieving scalability in modelling and MDE involves being able to construct large models and domain-specific languages in a systematic manner, enabling teams of modellers to construct and refine large models in collaboration, advancing the state of the art in model querying and transformations tools so that they can cope with large models (of the scale of millions of model elements), and providing an infrastructure for efficient storage, indexing and retrieval of large models. This paper outlines how MONDO, a collaborative EC-funded project, contributes to tackling some of these scalability-related challenges.},
  copyright = {All rights reserved},
  keywords = {mde,my-journal,no-example},
  file = {/Users/max/Zotero/storage/4I65Y6TY/Kolovos et al. - 2015 - MONDO Scalable Modelling and model management on the cloud.pdf;/Users/max/Zotero/storage/BPXWQXHT/Kolovos et al. - 2016 - MONDO Scalable Modelling and Model Management on the Cloud.pdf}
}

@article{Martinez2017,
  title = {Reactive Model Transformation with {{ATL}}},
  author = {Mart{\'i}nez, Salvador and Tisi, Massimo and Douence, R{\'e}mi},
  year = {2017},
  journal = {Science of Computer Programming},
  volume = {136},
  pages = {1--16},
  issn = {01676423},
  doi = {10.1016/j.scico.2016.08.006},
  abstract = {Model-driven applications may maintain large networks of structured data models and transformations among them. The development of such applications is complicated by the need to reflect on the whole network any runtime update performed on models or transformation logic. If not carefully designed, the execution of such updates may be computationally expensive. In this paper we propose a reactive paradigm for programming model transformations, and we implement a reactive model-transformation engine. We argue that this paradigm facilitates the development of autonomous model-driven systems that react to update and request events from the host application by identifying and performing only the needed computation. We implement such approach by providing a reactive engine for the ATL transformation language. We evaluate the usage scenarios that this paradigm supports and we experimentally measure its ability to reduce computation time in transformation-based applications.},
  copyright = {All rights reserved},
  keywords = {c2r,Model transformations,Model-driven engineering,my-journal,Reactive programming,reactiveatl},
  file = {/Users/max/Zotero/storage/QGT2ISXD/MartÃ­nez, Tisi, Douence - 2017 - Reactive model transformation with ATL.pdf}
}

@article{Schwinger2008,
  title = {A {{Survey}} on {{Web Modeling Approaches}} for {{Ubiquitous Web Applications}}},
  author = {Schwinger, Wieland and Retschitzegger, Werner and Schauerhuber, Andrea and Kappel, Gerti and Wimmer, Manuel and Pr{\"o}ll, Birgit and Castro, Cristina Cachero and Casteleyn, Sven and Troyer, Olga De and Fraternali, Piero and Garrigos, Irene and Garzotto, Franca and Ginige, Athula and Houben, Geert-Jan and Koch, Nora and Moreno, Nathalie and Pastor, Oscar and Paolini, Paolo and Ferragud, Vicente Pelechano and Rossi, Gustavo and Schwabe, Daniel and Tisi, Massimo and Vallecillo, Antonio and Sluijs, Kees Van Der and Zhang, Gefei},
  year = {2008},
  journal = {International Journal of Web Information Systems},
  volume = {4},
  number = {3},
  pages = {234--305},
  issn = {1744-0084},
  doi = {10.1108/17440080810901089},
  abstract = {Web},
  copyright = {All rights reserved},
  keywords = {computer applications,customization,internet,my-journal,paper type general review,user interfaces,web},
  file = {/Users/max/Zotero/storage/E7VJFDEG/Schwinger et al. - 2008 - A Survey on Web Modeling Approaches for Ubiquitous Web Applications.pdf}
}
