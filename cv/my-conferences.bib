@inproceedings{10.1007/978-3-662-46078-8_35,
  title = {A Model-Driven Approach to Generate External {{DSLs}} from Object-Oriented {{APIs}}},
  booktitle = {{{SOFSEM}} 2015: {{Theory}} and Practice of Computer Science},
  author = {Cosentino, Valerio and Tisi, Massimo and Izquierdo, Javier Luis C{\'a}novas},
  editor = {Italiano, Giuseppe F. and {Margaria-Steffen}, Tiziana and Pokorn{\'y}, Jaroslav and Quisquater, Jean-Jacques and Wattenhofer, Roger},
  year = {2015},
  pages = {423--435},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  abstract = {Developers in modern general-purpose programming languages create reusable code libraries by encapsulating them in Applications Programming Interfaces (APIs). Domain-specific languages (DSLs) can be developed as an alternative method for code abstraction and distribution, sometimes preferable to APIs because of their expressivity and tailored development environment. However the cost of implementing a fully functional development environment for a DSL is generally higher. In this paper we propose DSLit, a prototype-tool that, given an existing API, reduces the cost of developing a corresponding DSL by analyzing the API, automatically generating a semantically equivalent DSL with its complete development environment, and allowing for user customization. To build this bridge between the API and DSL technical spaces we make use of existing Model-Driven Engineering (MDE) techniques, further promoting the vision of MDE as a unifying technical space.},
  copyright = {All rights reserved},
  isbn = {978-3-662-46078-8},
  keywords = {dsls,my-conference},
  file = {/Users/max/Zotero/storage/7YFKJKHD/Cosentino, Tisi, Izquierdo - 2015 - A model-driven approach to generate external DSLs from object-oriented APIs.pdf}
}

@inproceedings{acerbis_developing_2007,
  title = {Developing {{eBusiness Solutions}} with a {{Model Driven Approach}}: {{The Case}} of {{Acer EMEA}}},
  shorttitle = {Developing {{eBusiness Solutions}} with a {{Model Driven}}},
  booktitle = {Proceedings of {{ICWE2007}}},
  author = {Acerbis, R. and Bongio, A. and Brambilla, M. and Tisi, Massimo and Ceri, S. and Tosetti, E.},
  year = {2007},
  volume = {4607},
  pages = {539},
  publisher = {{LNCS}},
  copyright = {All rights reserved},
  keywords = {my-conference,web},
  file = {/Users/max/Zotero/storage/EZNW3FC7/Acerbis et al. - 2007 - Developing eBusiness Solutions with a Model Driven Approach The Case of Acer EMEA.pdf}
}

@inproceedings{baresi_towards_2005,
  title = {Towards Model-Driven Testing of a {{Web}} Application Generator},
  booktitle = {Web {{Engineering}}, {{Proceedings}}},
  author = {Baresi, L. and Fraternali, P. and Tisi, M. and Morasca, S.},
  year = {2005},
  volume = {3579},
  pages = {75--86},
  publisher = {{Springer}},
  issn = {03029743},
  doi = {10.1007/11531371_13},
  abstract = {Conceptual modelling is a promising approach for Web application development, thanks to innovative \{CASE\} tools that can transform high-level specifications into executable code. So far, the impact of conceptual modelling has been evaluated mostly on analysis and design. This paper addresses its influence on testing, one of the most important and effort-consuming phases, by investigating how the traditional notions of testing carry over to the problem of verifying the correctness of Web applications produced by model-driven code generators. The paper examines an industrial case study carried out in a software factory where code generators are produced for a commercial Web \{CASE\} tool.},
  copyright = {All rights reserved},
  isbn = {3-540-27996-2},
  keywords = {my-conference,read,web},
  file = {/Users/max/Zotero/storage/F3GUPLPC/Baresi et al. - 2005 - Towards Model-driven Testing of a Web Application Generator.pdf}
}

@inproceedings{Benelallam2014,
  title = {{{Neo4EMF}}, {{A}} Scalable Persistence Layer for {{EMF}} Models},
  booktitle = {Lecture {{Notes}} in {{Computer Science}} (Including Subseries {{Lecture Notes}} in {{Artificial Intelligence}} and {{Lecture Notes}} in {{Bioinformatics}})},
  author = {Benelallam, Amine and G{\'o}mez, Abel and Suny{\'e}, Gerson and Tisi, Massimo and Launay, David},
  year = {2014},
  volume = {8569 LNCS},
  pages = {230--241},
  doi = {10.1007/978-3-319-09195-2_15},
  abstract = {Several industrial contexts require software engineering methods and tools able to handle large-size artifacts. The central idea of abstraction makes model-driven engineering (MDE) a promising approach in such contexts, but current tools do not scale to very large models (VLMs): already the task of storing and accessing VLMs from a persisting support is currently inefficient. In this paper we propose a scalable persistence layer for the de-facto standard MDE framework EMF. The layer exploits the efficiency of graph databases in storing and accessing graph structures, as EMF models are. A preliminary experimentation shows that typical queries in reverse-engineering EMF models have good performance on such persistence layer, compared to file-based backends. \textcopyright{} 2014 Springer International Publishing Switzerland.},
  copyright = {All rights reserved},
  isbn = {9783319091945},
  keywords = {my-conference,neoemf},
  file = {/Users/max/Zotero/storage/DJTBZZ6M/Benelallam et al. - 2014 - Neo4EMF, A scalable persistence layer for EMF models.pdf}
}

@inproceedings{Benelallam2015a,
  title = {Distributed Model-to-Model Transformation with {{ATL}} on {{MapReduce}}},
  booktitle = {Proceedings of the 2015 {{ACM SIGPLAN International Conference}} on {{Software Language Engineering}}, {{SLE}} 2015, {{Pittsburgh}}, {{PA}}, {{USA}}, {{October}} 25-27, 2015},
  author = {Benelallam, Amine and G{\'o}mez, Abel and Tisi, Massimo and Cabot, Jordi},
  year = {2015},
  pages = {37--48},
  doi = {10.1145/2814251.2814258},
  abstract = {? 2015 ACM.Efficient procebing of very large models is a key requirement for the adoption of Model-Driven Engineering (MDE) in some industrial contexts. One of the central operations in MDE is rule-based model transformation (MT). It is used to specify manipulation operations over structured data coming in the form of model graphs. However, being based on computationally expensive operations like subgraph isomorphism, MT tools are facing ibues on both memory occupancy and execution time while dealing with the increasing model size and complexity. One way to overcome these ibues is to exploit the wide availability of distributed clusters in the Cloud for the distributed execution of MT. In this paper, we propose an approach to automatically distribute the execution of model transformations written in a popular MT language, ATL, on top of a well-known distributed programming model, MapReduce. We show how the execution semantics of ATL can be aligned with the MapReduce computation model. We describe the extensions to the ATL transformation engine to enable distribution, and we experimentally demonstrate the scalability of this solution in a reverse-engineering scenario.},
  copyright = {All rights reserved},
  isbn = {978-1-4503-3686-4},
  keywords = {[ATL,atlmr,Distributed Computing,Language Engineering,my-conference},
  file = {/Users/max/Zotero/storage/FNH6WZE2/Benelallam et al. - 2015 - Distributed model-to-model transformation with ATL on MapReduce.pdf}
}

@inproceedings{benelallamEfficientModelPartitioning2016,
  title = {Efficient {{Model Partitioning}} for {{Distributed Model Transformations}}},
  booktitle = {Proceedings of the 2016 {{International Conference}} of {{Software Language Engineering}}},
  author = {Benelallam, Amine and Tisi, Massimo and Cuadrado, Jes{\'u}s S{\'a}nchez and de Lara, Juan and Cabot, Jordi},
  year = {2016},
  month = oct,
  urldate = {2022-05-07},
  abstract = {As the models that need to be handled in model-driven engineering grow in scale, scalable algorithms for model transformation (MT) are becoming necessary. Programming models such as MapReduce or Pregel may simplify the development of distributed model transformations. However, because of the dense inter-connectivity of models and the complexity of transformation logics, scalability in distributed model processing is challenging. In this paper, we adapt existing formalization of uniform graph partitioning to the case of distributed MTs by means of binary linear programming. Moreover, we propose a data distribution algorithm for declarative model transformation based on static analysis of relational transformation rules. We first extract footprints from transformation rules. Then we propose a fast data distribution algorithm, driven by the extracted footprints, and based on recent results on balanced partitioning of streaming graphs. To validate our approach, we apply it to an existing distributed MT engine for the ATL language, built on top of MapReduce. We implement our heuristic as a custom split algorithm for ATL on MapReduce and we evaluate its impact on remote access to the underlying backend.},
  copyright = {All rights reserved},
  langid = {english},
  keywords = {atlmr,my-conference},
  file = {/Users/max/Zotero/storage/DMF7VNKD/hal-01367572.html}
}

@inproceedings{berrouyneCyprIoTFrameworkModelling2019,
  title = {{{CyprIoT}}: Framework for Modelling and Controlling Network-Based {{IoT}} Applications},
  shorttitle = {{{CyprIoT}}},
  booktitle = {Proceedings of the 34th {{ACM}}/{{SIGAPP Symposium}} on {{Applied Computing}}},
  author = {Berrouyne, Imad and Adda, Mehdi and Mottu, Jean-Marie and Royer, Jean-Claude and Tisi, Massimo},
  year = {2019},
  month = apr,
  pages = {832--841},
  publisher = {{ACM}},
  address = {{Limassol Cyprus}},
  doi = {10.1145/3297280.3297362},
  urldate = {2022-05-07},
  abstract = {Model-Driven Engineering (MDE) is a paradigm that favors using models to address software engineering problems. Very few attempts have been made to apply this paradigm to the Internet of Things (IoT). Most of the existing MDE approaches focus on abstracting the heterogeneity of IoT things while neglecting network communication heterogeneity. In fact, few attempts target network-based IoT applications. In this paper, we propose a framework, called CyprIoT, to model and control network-based IoT applications using MDE techniques. Our approach relies on 1) Networking Language, to model a network of IoT things 2) Rule-Based Policy Language, to control and supervise the behavior of the modeled network 3) Code Generator, to interpret the model and generate deployable network artifacts and 4) Plug-in System, to customize, enhance or implement expert knowledge into the generated artifacts.},
  copyright = {All rights reserved},
  isbn = {978-1-4503-5933-7},
  langid = {english},
  keywords = {iot,my-conference},
  file = {/Users/max/Zotero/storage/2ADWHIR4/Berrouyne et al. - 2019 - CyprIoT framework for modelling and controlling n.pdf}
}

@inproceedings{berrouyneModelDrivenApproachUnravel2020,
  title = {A {{Model-Driven Approach}} to {{Unravel}} the {{Interoperability Problem}} of the {{Internet}} of {{Things}}},
  booktitle = {Advanced {{Information Networking}} and {{Applications}}},
  author = {Berrouyne, Imad and Adda, Mehdi and Mottu, Jean-Marie and Royer, Jean-Claude and Tisi, Massimo},
  editor = {Barolli, Leonard and Amato, Flora and Moscato, Francesco and Enokido, Tomoya and Takizawa, Makoto},
  year = {2020},
  volume = {1151},
  pages = {1162--1175},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-44041-1_100},
  urldate = {2022-05-07},
  abstract = {The Internet of Things (IoT) aims for connecting Anything, Anywhere, Anytime (AAA). This premise brings about heterogeneity that creates connectivity challenges. These challenges constitutes a serious obstacle to interoperability between things. Most existing approaches tackles the interoperability problem by avoiding heterogeneity with standards at runtime. While heterogeneity is an intrinsic feature of the IoT, there is a need for an approach that embraces it to connect AAA. In this paper we propose a model-based methodology to tackle the interoperability problem. It relies on a Domain-Specific Language (DSL) for a model-based specification of the network and a transformation process to generate the network artifacts from this specification. The principle consists of achieving interoperability at the model-level, then during a transformation process, ensuring that it is preserved in the low-level code. Adopting this methodology makes the engineering of the IoT more rigorous, prevents bugs earlier and saves time.},
  copyright = {All rights reserved},
  isbn = {978-3-030-44040-4 978-3-030-44041-1},
  langid = {english},
  keywords = {iot,my-conference},
  file = {/Users/max/Zotero/storage/K77Q6VAE/Berrouyne et al. - 2020 - A Model-Driven Approach to Unravel the Interoperab.pdf}
}

@inproceedings{bezierslafosseAnnotatingExecutableDSLs2020,
  title = {Annotating Executable {{DSLs}} with Energy Estimation Formulas},
  booktitle = {Proceedings of the 13th {{ACM SIGPLAN International Conference}} on {{Software Language Engineering}}},
  author = {{B{\'e}ziers la Fosse}, Thibault and Tisi, Massimo and Mottu, Jean-Marie and Suny{\'e}, Gerson},
  year = {2020},
  month = nov,
  pages = {22--38},
  publisher = {{ACM}},
  address = {{Virtual USA}},
  doi = {10.1145/3426425.3426930},
  urldate = {2022-05-07},
  abstract = {Reducing the energy consumption of a complex, especially cyber-physical, system is a cross-cutting concern through the system layers, and typically requires long feedback loops between experts in several engineering disciplines. Having an immediate automatic estimation of the global system consumption at design-time would significantly accelerate this process, but cross-layer tools are missing in several domains. Executable domain-specific modeling languages (xDSLs) can be used to design several layers of the system under development in an integrated view. By including the behavioral specification for software and physical components of the system, they are an effective source artifact for cross-layer energy estimation.},
  copyright = {All rights reserved},
  isbn = {978-1-4503-8176-5},
  langid = {english},
  keywords = {cps,Cyber-Physical Systems,Energy Estimation,my-conference,XDSL},
  file = {/Users/max/Zotero/storage/2NE4KGTX/Béziers la Fosse et al. - 2020 - Annotating executable DSLs with energy estimation .pdf}
}

@inproceedings{brambilla_marginalized_2008,
  title = {{{ICT Education}} as a {{Key Emancipation Factor}} for {{Young People}} in {{Marginal Quarters}} of {{Developing Countries}}},
  booktitle = {Marginalized {{Young People}}: {{Inclusion Through ICT}}, Workshop at {{IDC2008}}},
  author = {Brambilla, Marco and Fraternali, Piero and Silva, Matteo and Tisi, Massimo},
  year = {2008},
  pages = {1--4},
  copyright = {All rights reserved},
  keywords = {acm classification keywords,developing countries,ict education,marginal quarters,my-conference,web},
  file = {/Users/max/Zotero/storage/4HGJCUYG/Brambilla et al. - 2008 - ICT Education as a Key Emancipation Factor for Young People in Marginal Quarters of Developing Countries.pdf}
}

@inproceedings{brambilla_transformation_2008,
  title = {A Transformation Framework to Bridge Domain Specific Languages to {{MDA}}},
  booktitle = {Lecture {{Notes}} in {{Computer Science}} (Including Subseries {{Lecture Notes}} in {{Artificial Intelligence}} and {{Lecture Notes}} in {{Bioinformatics}})},
  author = {Brambilla, Marco and Fraternali, Piero and Tisi, Massimo},
  year = {2009},
  volume = {5421},
  pages = {167--180},
  publisher = {{Lecture Notes In Computer Science, Springer}},
  doi = {10.1007/978-3-642-01648-6_18},
  urldate = {2011-08-19},
  abstract = {The Model Driven Architecture aims at the integration of different modeling languages, artifacts and tools in a unified technical space. Pre-existing development methodologies based on Domain Specific Languages (DSL) require a complex process to benefit from this integration. After a MOF metamodel for the DSL is defined, there is no standard methodology to move legacy models and tools to the new architecture. This paper proposes a general model-driven integration procedure for pre-MDA DSLs. The procedure, given the definition of suitable model transformations, is completely automatic. The proposed framework is fully implemented, in a way independent of the specific DSL that must be transformed. As a case study, a toolsuite based on WebML, a DSL for designing Web applications, is bridged to MDA.},
  copyright = {All rights reserved},
  isbn = {9783642016479},
  keywords = {my-conference,web},
  file = {/Users/max/Zotero/storage/WK7UKWPI/Brambilla, Fraternali, Tisi - 2009 - A transformation framework to bridge domain specific languages to MDA.pdf}
}

@inproceedings{Brambilla2010,
  title = {Search Computing: {{A}} Model-Driven Perspective},
  booktitle = {Lecture {{Notes}} in {{Computer Science}} (Including Subseries {{Lecture Notes}} in {{Artificial Intelligence}} and {{Lecture Notes}} in {{Bioinformatics}})},
  author = {Brambilla, Marco and Ceri, Stefano and Tisi, Massimo},
  year = {2010},
  volume = {6142 LNCS},
  pages = {1--15},
  publisher = {{Springer}},
  doi = {10.1007/978-3-642-13688-7_1},
  urldate = {2011-02-17},
  abstract = {Search Computing is a novel discipline that focuses on exploratory search of multi-domain Web queries like "Where can I attend an interesting conference in my field close to a sunny beach?". The approach is based on the interaction between cooperating search services, using ranking and joining of results as the dominant factors for service composition. This paper sketches the main characteristics of search computing and discusses how software engineering and model-driven engineering are challenged by the search computing problems. We present Search Computing applications from a model-driven perspective, in terms of (1) the models describing the objects of interest, (2) the specification of applications through model transformations, and (3) the definition of a domain specific language (DSL) defined for the specification of search query plans. This work provides a first exploration of MDE approaches applied to search computing and poses a set of challenges to the model transformation community.},
  copyright = {All rights reserved},
  isbn = {3642136877},
  keywords = {ATL,conceptual models,MDD,model transformations,my-conference,Search Computing,search engine,software engineering,web},
  file = {/Users/max/Zotero/storage/IFVSXF6I/Brambilla, Ceri, Tisi - 2010 - Search computing A model-driven perspective.pdf}
}

@inproceedings{cheng:hal-01435974,
  title = {Incremental {{Deductive Verification}} for {{Relational Model Transformations}}},
  booktitle = {{{ICST}} 2017 - 10th {{IEEE International Conference}} on {{Software Testing}}, {{Verification}} and {{Validation}}},
  author = {Cheng, Zheng and Tisi, Massimo},
  year = {2017},
  month = mar,
  address = {{Tokyo, Japan}},
  copyright = {All rights reserved},
  keywords = {my-conference,veriatl},
  file = {/Users/max/Zotero/storage/YSUQI8DT/Cheng and Tisi - 2017 - Incremental Deductive Verification for Relational .pdf}
}

@inproceedings{chengCertifyingRulebasedModel2020,
  title = {Certifying a Rule-Based Model Transformation Engine for Proof Preservation},
  booktitle = {Proceedings of the 23rd {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}},
  author = {Cheng, Zheng and Tisi, Massimo and Hotonnier, Joachim},
  year = {2020},
  month = oct,
  pages = {297--307},
  publisher = {{ACM}},
  address = {{Virtual Event Canada}},
  doi = {10.1145/3365438.3410949},
  urldate = {2022-05-07},
  abstract = {Executable engines for relational model-transformation languages evolve continuously because of language extension, performance improvement and bug fixes. While new versions generally change the engine semantics, end-users expect to get backward-compatibility guarantees, so that existing transformations do not need to be adapted at every engine update. The CoqTL model-transformation language allows users to define model transformations, theorems on their behavior and machinechecked proofs of these theorems in Coq. Backward-compatibility for CoqTL involves also the preservation of these proofs. However, proof preservation is challenging, as proofs are easily broken even by small refactorings of the code they verify.},
  copyright = {All rights reserved},
  isbn = {978-1-4503-7019-6},
  langid = {english},
  keywords = {c2r,coqtl,my-conference},
  file = {/Users/max/Zotero/storage/4E9SHW78/Cheng et al. - 2020 - Certifying a rule-based model transformation engin.pdf}
}

@inproceedings{chengEfficientlyCharacterizingUndefined2018,
  title = {Efficiently {{Characterizing}} the {{Undefined Requests}} of a {{Rule-Based System}}},
  booktitle = {{{IFM}} 2018 - 14th {{International Conference}} on Integrated {{Formal Methods}}},
  author = {Cheng, Zheng and Royer, Jean-Claude and Tisi, Massimo},
  year = {2018},
  month = sep,
  series = {{{LNCS}}},
  volume = {11023},
  pages = {69--88},
  publisher = {{Springer}},
  address = {{Maynooth, Ireland}},
  doi = {10.1007/978-3-319-98938-9_5},
  urldate = {2023-01-07},
  copyright = {All rights reserved},
  keywords = {my-conference,policies},
  file = {/Users/max/Zotero/storage/BRA95C4S/Cheng et al. - 2018 - Efficiently Characterizing the Undefined Requests .pdf}
}

@inproceedings{chengRemovingProblemsRuleBased2019,
  title = {Removing {{Problems}} in {{Rule-Based Policies}}},
  booktitle = {{{ICT Systems Security}} and {{Privacy Protection}}},
  author = {Cheng, Zheng and Royer, Jean-Claude and Tisi, Massimo},
  editor = {Dhillon, Gurpreet and Karlsson, Fredrik and Hedstr{\"o}m, Karin and Z{\'u}quete, Andr{\'e}},
  year = {2019},
  volume = {562},
  pages = {120--133},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-22312-0_9},
  urldate = {2022-05-07},
  abstract = {Analyzing and fixing problems of complex rule-based policies, like inconsistencies and conflicts, is a well-known topic in security. In this paper, by leveraging previous work on enumerating all the problematic requests for an inconsistent system, we define an operation on the policy that removes these problems. While the final fix remains a typically manual activity, removing conflicts allows the user to work on unambiguous policies, produced automatically. We prove the main properties of the problem removal operation on rule-based systems in firstorder logic. We propose an optimized process to automatically perform problem removal by reducing time and size of the policy updates. Finally we apply it to an administrative role-based access control (ARBAC) policy and an attribute-based access control (ABAC) policy, to illustrate its use and performance.},
  copyright = {All rights reserved},
  isbn = {978-3-030-22311-3 978-3-030-22312-0},
  langid = {english},
  keywords = {my-conference,policies},
  file = {/Users/max/Zotero/storage/MFAPPWL3/Cheng et al. - 2019 - Removing Problems in Rule-Based Policies.pdf}
}

@inproceedings{DBLP:conf/ecmdafa/TisiJFCB09,
  title = {On the {{Use}} of {{Higher-Order Model Transformations}}},
  booktitle = {Proceedings of the {{Fifth European Conference}} on {{Model-Driven Architecture Foundations}} and {{Applications}} ({{ECMDA}})},
  author = {Tisi, Massimo and Jouault, F. and Fraternali, P. and Ceri, S. and B{\'e}zivin, J.},
  year = {2009},
  pages = {18--33},
  publisher = {{Springer}},
  copyright = {All rights reserved},
  keywords = {hot,my-conference,no-example},
  file = {/Users/max/Zotero/storage/U7BZJ638/Tisi et al. - 2009 - On the Use of Higher-Order Model Transformations.pdf}
}

@inproceedings{DBLP:conf/icwe/FraternaliT09,
  title = {A Higher Order Generative Framework for Weaving Traceability Links into a Code Generator for Web Application Testing},
  booktitle = {International {{Conference}} on {{Web Engineering}}},
  author = {Fraternali, Piero and Tisi, Massimo},
  year = {2009},
  volume = {5648 LNCS},
  pages = {340--354},
  issn = {03029743},
  doi = {10.1007/978-3-642-02818-2_28},
  abstract = {Model Driven Engineering is extending its reach beyond the generation of code from Platform Independent Models (\{PIMs\}), to all the phases of the software life-cycle. This paper presents an approach to exploit \{PIMs\} to ease regression testing, whereby developers can record and replay testing sessions and investigate testing failures on the application model, thanks to traceability links automatically inserted in the generated code. The core of the approach is a modified version of the model transformation for code generation, obtained by applying a Higher Order Transformation (\{HOT\}), that is a transformation that takes in input a transformation (the original code generator) and produces another transformation (the augmented code generator). The \{HOT\} weaves into the code generator additional rules producing traceability clues that help developers link any error to the model features likely to cause it. \textcopyright{} 2009 Springer Berlin Heidelberg.},
  copyright = {All rights reserved},
  isbn = {3-642-02817-9},
  keywords = {my-conference,web},
  file = {/Users/max/Zotero/storage/RSXZX4YC/Fraternali, Tisi - 2009 - A higher order generative framework for weaving traceability links into a code generator for web application t.pdf}
}

@inproceedings{fraternali_automating_2006,
  title = {Automating {{Function Point Analysis}} with {{Model Driven Development}}},
  booktitle = {Proceedings of the 2006 Conference of the {{Center}} for {{Advanced Studies}} on {{Collaborative}} Research - {{CASCON}} '06},
  author = {Fraternali, Piero and Tisi, Massimo and Bongio, Aldo},
  year = {2006},
  pages = {18},
  publisher = {{ACM Press}},
  address = {{New York, New York, USA}},
  doi = {10.1145/1188966.1188990},
  copyright = {All rights reserved},
  keywords = {my-conference,web},
  file = {/Users/max/Zotero/storage/3AL59PQE/Fraternali, Tisi, Bongio - 2006 - Automating Function Point Analysis with Model Driven Development.pdf}
}

@inproceedings{fraternali_developing_2006,
  title = {Developing {{eBusiness Solutions}} with a {{Model Driven Approach}}},
  booktitle = {Proceedings of {{IMP2006}}},
  author = {Fraternali, Piero and Ceri, Stefano and Tisi, Massimo and Tosetti, Emanuele},
  year = {2006},
  copyright = {All rights reserved},
  keywords = {my-conference,web},
  file = {/Users/max/Zotero/storage/TXQU6MUA/Fraternali et al. - 2006 - Developing eBusiness Solutions with a Model Driven Approach.pdf}
}

@inproceedings{fraternali_identifying_2008,
  title = {Identifying {{Cultural Markers}} for {{Web Application Design Targeted}} to a {{Multi-cultural Audience}}},
  booktitle = {Eigth {{International Conference}} on {{Web Engineering}}},
  author = {Fraternali, Piero and Tisi, Massimo},
  year = {2008},
  month = jul,
  pages = {231--239},
  publisher = {{Ieee}},
  doi = {10.1109/ICWE.2008.34},
  copyright = {All rights reserved},
  keywords = {my-conference,web},
  file = {/Users/max/Zotero/storage/STY6UNMD/Fraternali, Tisi - 2008 - Identifying Cultural Markers for Web Application Design Targeted to a Multi-cultural Audience.pdf}
}

@inproceedings{Fraternali2010,
  title = {Multi-Level {{Tests}} for {{Model Driven Web Applications}}},
  booktitle = {Lecture {{Notes}} in {{Computer Science}} (Including Subseries {{Lecture Notes}} in {{Artificial Intelligence}} and {{Lecture Notes}} in {{Bioinformatics}})},
  author = {Fraternali, Piero P.a and Tisi, Massimo M.b},
  year = {2010},
  volume = {6189 \{LNCS\vphantom\}},
  pages = {158--172},
  doi = {10.1007/978-3-642-13911-6_11},
  abstract = {Model Driven Engineering (\{MDE\}) advocates the use of models and transformations to support all the tasks of software development, from analysis to testing and maintenance. Modern \{MDE\} methodologies employ multiple models, to represent the different perspectives of the system at a progressive level of abstraction. In these situations, \{MDE\} frameworks need to work on a set of interdependent models and tranformations, which may evolve over time. This paper presents a model transformation framework capable of aligning two streams of transformations: the forward engineering stream that goes from the Computation Independent Model to the running code, and the testing stream that goes from the Computation Independent Test specification to an executable test script. The "vertical" transformations composing the two streams are kept aligned, by means of "horizontal" mappings that can be applied after a change in the modeling framework (e.g., an update in the \{PIM\}-to-code transformation due to a change in the target deployment technology). The proposed framework has been implemented and is under evaluation in a real-world \{MDE\} tool. \textcopyright{} 2010 Springer-Verlag.},
  copyright = {All rights reserved},
  isbn = {3642139108 | 9783642139109},
  keywords = {\{WEB\} application,Code transformation,Computation independent model,Cosine transforms,Hydraulics,Level of abstraction,Model transformation,Model-driven,Model-driven Engineering,Modeling frameworks,Models,Multi-level,Multiple models,my-conference,Real-world,Software design,Software development,Test scripts,Test specifications,Testing and maintenance,Two-stream,web},
  file = {/Users/max/Zotero/storage/4ATKHHBA/Fraternali, Tisi - 2010 - Multi-level Tests for Model Driven Web Applications(2).pdf}
}

@inproceedings{Gomez2015a,
  title = {Map-{{Based Transparent Persistence}} for {{Very Large Models}}},
  booktitle = {Fundamental {{Approaches}} to {{Software Engineering}}},
  author = {G{\'o}mez, Abel and Tisi, Massimo and Suny{\'e}, Gerson and Cabot, Jordi},
  year = {2015},
  volume = {9033},
  pages = {19--34},
  issn = {01676423},
  doi = {10.1007/978-3-662-46675-9_2},
  abstract = {The progressive industrial adoption of Model-Driven Engineering (MDE) is fostering the development of large tool ecosystems like the Eclipse Modeling project. These tools are built on top of a set of base technologies that have been primarily designed for small-scale scenarios, where models are manually developed. In particular, efficient runtime manipulation for large-scale models is an under-studied problem and this is hampering the application of MDE to several industrial scenarios. In this paper we introduce and evaluate a map-based persistence model for MDE tools. We use this model to build a transparent persistence layer for modeling tools, on top of a map-based database engine. The layer can be plugged into the Eclipse Modeling Framework, lowering execution times and memory consumption levels of other existing approaches. Empirical tests are performed based on a typical industrial scenario, model-driven reverse engineering, where very large software models originate from the analysis of massive code bases. The layer is freely distributed and can be immediately used for enhancing the scalability of any existing Eclipse Modeling tool.},
  copyright = {All rights reserved},
  isbn = {978-3-662-46674-2},
  keywords = {Model Driven Engineering,Model Persistence,my-conference,neoemf,Very},
  file = {/Users/max/Zotero/storage/2G7MHJME/Gómez et al. - 2015 - Map-Based Transparent Persistence for Very Large Models.pdf}
}

@inproceedings{hidaka:hal-01566259,
  title = {On {{Additivity}} in {{Transformation Languages}}},
  booktitle = {2017 {{ACM}}/{{IEEE}} 20th {{International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}} ({{MODELS}})},
  author = {Hidaka, Sochiro and Jouault, Frederic and Tisi, Massimo},
  year = {2017},
  month = sep,
  pages = {23--33},
  publisher = {{IEEE}},
  address = {{Austin, Texas, United States}},
  doi = {10.1109/MODELS.2017.21},
  copyright = {All rights reserved},
  isbn = {978-1-5386-3492-9},
  keywords = {atlgt,c2r,my-conference},
  file = {/Users/max/Zotero/storage/Q32YQ4YC/Hidaka et al. - 2017 - On Additivity in Transformation Languages.pdf}
}

@inproceedings{Jouault2010,
  title = {Towards Incremental Execution of {{ATL}} Transformations},
  booktitle = {Theory and {{Practice}} of {{Model Transformations}}},
  author = {Jouault, Fr{\'e}d{\'e}ric and Tisi, Massimo},
  year = {2010},
  pages = {123--137},
  publisher = {{Springer}},
  doi = {10.1007/978-3-642-13688-7_9},
  urldate = {2010-11-02},
  copyright = {All rights reserved},
  keywords = {c2r,my-conference,reactiveatl},
  file = {/Users/max/Zotero/storage/IBF399T3/Jouault, Tisi - 2010 - Towards incremental execution of ATL transformations.pdf}
}

@inproceedings{Mottu2012,
  title = {Static Analysis of Model Transformations for Effective Test Generation},
  booktitle = {Proceedings - {{International Symposium}} on {{Software Reliability Engineering}}, {{ISSRE}}},
  author = {Mottu, J.-M. and Sen, S. and Tisi, M. and Cabot, J.},
  year = {2012},
  doi = {10.1109/ISSRE.2012.7},
  urldate = {2013-02-08},
  abstract = {Model transformations are an integral part of several computing systems that manipulate interconnected graphs of objects called models in an input domain specified by a metamodel and a set of invariants. Test models are used to look for faults in a transformation. A test model contains a specific set of objects, their interconnections and values for their attributes. Can we automatically generate an effective set of test models using knowledge from the transformation? We present a white-box testing approach that uses static analysis to guide the automatic generation of test inputs for transformations. Our static analysis uncovers knowledge about how the input model elements are accessed by transformation operations. This information is called the input metamodel footprint due to the transformation. We transform footprint, input metamodel, its invariants, and transformation pre-conditions to a constraint satisfaction problem in Alloy. We solve the problem to generate sets of test models containing traces of the footprint. Are these test models effective? With the help of a case study transformation we evaluate the effectiveness of these test inputs. We use mutation analysis to show that the test models generated from footprints are more effective (97.62\% avg. mutation score) in detecting faults than previously developed approaches based on input domain coverage criteria (89.9\% avg.) and unguided generation (70.1\% avg.). ? 2012 IEEE.},
  copyright = {All rights reserved},
  isbn = {9780769548883},
  keywords = {[Alloy,Automatic model completion,c2r,Model transfor,my-conference,testing},
  file = {/Users/max/Zotero/storage/YHM7DYTX/Mottu et al. - 2012 - Static analysis of model transformations for effective test generation.pdf}
}

@inproceedings{philippeExecutingCertifiedModel2021,
  title = {Executing Certified Model Transformations on {{Apache Spark}}},
  booktitle = {Proceedings of the 14th {{ACM SIGPLAN International Conference}} on {{Software Language Engineering}}},
  author = {Philippe, Jolan and Tisi, Massimo and Coullon, H{\'e}l{\`e}ne and Suny{\'e}, Gerson},
  year = {2021},
  month = oct,
  pages = {36--48},
  publisher = {{ACM}},
  address = {{Chicago IL USA}},
  doi = {10.1145/3486608.3486901},
  urldate = {2022-05-07},
  abstract = {Formal reasoning on model transformation languages allows users to certify model transformations against contracts. CoqTL includes a specification of a transformation engine in the Coq interactive theorem prover. An executable engine can be automatically extracted from this specification. Transformation contracts are proved by the user against the CoqTL specification and guaranteed to hold on the transformation running on the extracted implementation of CoqTL. The design of the transformation engine specification in CoqTL aims at easing the certification step, but this requirement harms the execution performance of the extracted engine.},
  copyright = {All rights reserved},
  isbn = {978-1-4503-9111-5},
  langid = {english},
  keywords = {c2r,my-conference,sparkte},
  file = {/Users/max/Zotero/storage/PLIMLLZK/Philippe et al. - 2021 - Executing certified model transformations on Apach.pdf}
}

@inproceedings{philippeTransparentCombinationModel2020,
  title = {Towards {{Transparent Combination}} of {{Model Management Execution Strategies}} for {{Low-Code Development Platforms}}},
  booktitle = {23rd {{ACM}}/{{IEEE International Conference}} on {{Model Driven Engineering Languages}} and {{Systems}}: {{Companion Proceedings}}},
  author = {Philippe, Jolan and Coullon, H{\'e}l{\`e}ne and Tisi, Massimo and Suny{\'e}, Gerson},
  year = {2020},
  month = oct,
  publisher = {{ACM}},
  address = {{Montreal (Virtually), Canada}},
  doi = {10.1145/3417990.3420206},
  urldate = {2022-05-07},
  abstract = {Low-code development platforms are taking an important place in the model-driven engineering ecosystem, raising new challenges, among which transparent efficiency or scalability. Indeed, the increasing size of models leads to difficulties in interacting with them efficiently. To tackle this scalability issue, some tools are built upon specific computational strategies exploiting reactivity, or parallelism. However, their performances may vary depending on the specific nature of their usage. Choosing the most suitable computational strategy for a given usage is a difficult task which should be automated. Besides, the most efficient solutions may be obtained by the use of several strategies at the same time. This paper motivates the need for a transparent multi-strategy execution mode for model-management operations. We present an overview of the different computational strategies used in the model-driven engineering ecosystem, and use a running example to introduce the benefits of mixing strategies for performing a single computation. This example helps us present our design ideas for a multi-strategy model-management system. e code-related and DevOps challenges that emerged from this analysis are also presented.},
  copyright = {All rights reserved},
  keywords = {Low-code development,Model-Driven Engineering,Multi-strategy,my-conference,OCL,Spark,sparkte},
  file = {/Users/max/Zotero/storage/RZ5EYPPB/Philippe et al. - 2020 - Towards Transparent Combination of Model Managemen.pdf}
}

@inproceedings{Sen2012,
  title = {Using Models of Partial Knowledge to Test Model Transformations},
  booktitle = {Lecture {{Notes}} in {{Computer Science}} (Including Subseries {{Lecture Notes}} in {{Artificial Intelligence}} and {{Lecture Notes}} in {{Bioinformatics}})},
  author = {Sen, Sagar and Mottu, Jean Marie and Tisi, Massimo and Cabot, Jordi},
  year = {2012},
  volume = {7307 LNCS},
  pages = {24--39},
  doi = {10.1007/978-3-642-30476-7_2},
  urldate = {2013-02-08},
  abstract = {Testers often use partial knowledge to build test models. This knowledge comes from sources such as requirements, known faults, existing inputs, and execution traces. In Model-Driven Engineering, test inputs are models executed by model transformations. Modelers build them using partial knowledge while meticulously satisfying several well-formedness rules imposed by the modelling language. This manual process is tedious and language constraints can force users to create complex models even for representing simple knowledge. In this paper, we want to simplify the development of test models by presenting an integrated methodology and semi-automated tool that allow users to build only small partial test models directly representing their testing intent. We argue that partial models are more readable and maintainable and can be automatically completed to full input models while considering language constraints. We validate this approach by evaluating the size and fault-detecting effectiveness of partial models compared to traditionally-built test models. We show that they can detect the same bugs/faults with a greatly reduced development effort. \textcopyright{} 2012 Springer-Verlag.},
  copyright = {All rights reserved},
  isbn = {9783642304750},
  keywords = {c2r,my-conference,testing},
  file = {/Users/max/Zotero/storage/CR66XXBH/Sen et al. - 2012 - Using models of partial knowledge to test model transformations(2).pdf}
}

@inproceedings{TISI:2011:INRIA-00609458:1,
  title = {Lazy Execution of Model-to-Model Transformations},
  booktitle = {Model {{Driven Engineering Languages}} and {{Systems}}, 14th {{International Conference}}, {{MODELS}} 2011},
  author = {Tisi, Massimo and Mart{\'i}nez, Salvador and Jouault, Fr{\'e}d{\'e}ric and Cabot, Jordi},
  year = {2011},
  month = oct,
  volume = {6981 LNCS},
  pages = {32--46},
  address = {{Wellington, Nouvelle-Z\'elande}},
  issn = {03029743},
  doi = {10.1007/978-3-642-24485-8_4},
  abstract = {The increasing adoption of Model-Driven Engineering in industrial contexts highlights scalability as a critical limitation of several MDE tools. Most of the current model-to-model transformation engines have been designed for one-shot translation of input models to output models, and present efficiency issues when applied to very large models. In this paper, we study the application of a lazy-evaluation approach to model transformations. We present a lazy execution algorithm for ATL, and we empirically evaluate a prototype implementation. With it, the elements of the target model are generated only when (and if) they are accessed, enabling also transformations that generate infinite target models. We achieve our goal on a significant subset of ATL by extending the ATL compiler.},
  copyright = {All rights reserved},
  isbn = {978-3-642-24484-1},
  keywords = {c2r,my-conference,reactiveatl},
  file = {/Users/max/Zotero/storage/Q9RUWFLF/Tisi et al. - 2011 - Lazy execution of model-to-model transformations.pdf}
}

@inproceedings{tisi:hal-01435977,
  title = {A {{Deductive Approach}} for {{Fault Localization}} in {{ATL Model Transformations}}},
  booktitle = {{{FASE}} 2017 - 20th {{International Conference}} on {{Fundamental Approaches}} to {{Software Engineering}}},
  author = {Tisi, Massimo and Cheng, Zheng},
  year = {2017},
  month = apr,
  address = {{Uppsala, Sweden}},
  copyright = {All rights reserved},
  keywords = {my-conference,veriatl},
  file = {/Users/max/Zotero/storage/QV7FINAV/Tisi and Cheng - 2017 - A Deductive Approach for Fault Localization in ATL.pdf}
}

@inproceedings{Tisi2010a,
  title = {Improving Higher-Order Transformations Support in {{ATL}}},
  booktitle = {Lecture {{Notes}} in {{Computer Science}} (Including Subseries {{Lecture Notes}} in {{Artificial Intelligence}} and {{Lecture Notes}} in {{Bioinformatics}})},
  author = {Tisi, Massimo and Cabot, Jordi and Jouault, Fr{\'e}d{\'e}ric},
  year = {2010},
  volume = {6142 LNCS},
  pages = {215--229},
  publisher = {{Springer}},
  doi = {10.1007/978-3-642-13688-7_15},
  urldate = {2011-02-17},
  abstract = {In Model-Driven Engineering (MDE), Higher-Order Transformations (HOTs) are model transformations that analyze, produce or manipulate other model transformations. In a previous survey we classified them, and showed their usefulness in different MDE scenarios. However, writing HOTs is generally considered a time-consuming and error-prone task, and often results in verbose code. In this paper we present several proposals to facilitate the definition of HOTs in ATL. Each proposal focuses on a specific kind of scenario. We validate our proposals by assessing their impact over the full list of HOTs described in the survey.},
  copyright = {All rights reserved},
  isbn = {3642136877},
  keywords = {hot,my-conference,no-example},
  file = {/Users/max/Zotero/storage/NEBW883F/Tisi, Cabot, Jouault - 2010 - Improving higher-order transformations support in ATL.pdf}
}

@inproceedings{Tisi2013,
  title = {Parallel Execution of {{ATL}} Transformation Rules},
  booktitle = {Model-{{Driven Engineering Languages}} and {{Systems}}: 16th {{International Conference}}, {{MODELS}} 2013, {{Miami}}, {{FL}}, {{USA}}, {{September}} 29 -- {{October}} 4, 2013. {{Proceedings}}},
  author = {Tisi, Massimo and Mart{\'i}nez, Salvador and Choura, Hassene},
  year = {2013},
  volume = {8107 LNCS},
  pages = {656--672},
  doi = {10.1007/978-3-642-41533-3_40},
  copyright = {All rights reserved},
  isbn = {9783642415326},
  keywords = {atl,c2r,my-conference},
  file = {/Users/max/Zotero/storage/Y9U9R5WX/Tisi, Martínez, Choura - 2013 - Parallel execution of ATL transformation rules.pdf}
}

@inproceedings{Tisi2014,
  title = {{{fUML}} as an {{Assembly Language}} for {{Model Transformation}}},
  booktitle = {Software {{Language}} \ldots},
  author = {Tisi, Massimo and Jouault, Fr{\'e}d{\'e}ric and Delatour, J{\'e}r{\^o}me and Saidi, Zied and Choura, Hassene},
  year = {2014},
  pages = {171--190},
  doi = {10.1007/978-3-319-11245-9_10},
  urldate = {2015-04-21},
  copyright = {All rights reserved},
  keywords = {c2r,fuml,my-conference},
  file = {/Users/max/Zotero/storage/9W45KNHX/Tisi et al. - 2014 - fUML as an Assembly Language for Model Transformation.pdf}
}

@inproceedings{Tisi2016,
  title = {Enabling {{OCL}} and {{fUML}} Integration by Transformation},
  booktitle = {Lecture {{Notes}} in {{Computer Science}} (Including Subseries {{Lecture Notes}} in {{Artificial Intelligence}} and {{Lecture Notes}} in {{Bioinformatics}})},
  author = {Tisi, Massimo and Jouault, Fr{\'e}d{\'e}ric and Saidi, Zied and Delatour, J{\'e}rome},
  year = {2016},
  volume = {9764},
  pages = {156--172},
  issn = {16113349},
  doi = {10.1007/978-3-319-42061-5_10},
  abstract = {? Springer International Publishing Switzerland 2016.Until the recent adoption of fUML, UML has lacked standard execution semantics. However, parts of UML models have always been executable: OCL expressions. They may notably be used to express contracts (i.e., invariants, pre- and post-conditions), to define side-effect free operations, and to specify how to compute derived features. Nonetheless, although fUML is partly inspired by OCL (notably for primitive behaviors), its specification does not consider interoperability with OCL expressions. Moreover, the semantics of OCL is specified independently of (f)UML, and their implementations are separate execution engines, hampering all global activities (e.g., analysis, optimization, debugging). This paper explores a possible integration approach of OCL and fUML: by transforming (i.e., compiling) OCL expressions into fUML activities we obtain a unified executable model. With this approach, operations specified in OCL can be called, and getters can be generated for derived features. Preconditions (resp. postconditions) can be automatically executed before (resp. after) the execution of their contextual operations. A precise semantics for invariant evaluation can be specified in fUML. Thanks to this work, OCL may also be seen as a functional counterpart to Alf.},
  copyright = {All rights reserved},
  isbn = {978-3-319-42060-8},
  keywords = {fuml,my-conference},
  file = {/Users/max/Zotero/storage/FQMVFMBP/Tisi et al. - 2016 - Enabling OCL and fUML integration by transformation.pdf}
}

@inproceedings{Tisi2018,
  title = {{{CoqTL}}: {{An}} Internal {{DSL}} for Model Transformation in {{Coq}}},
  booktitle = {Lecture {{Notes}} in {{Computer Science}} (Including Subseries {{Lecture Notes}} in {{Artificial Intelligence}} and {{Lecture Notes}} in {{Bioinformatics}})},
  author = {Tisi, Massimo and Cheng, Zheng},
  year = {2018},
  volume = {10888 LNCS},
  pages = {142--156},
  issn = {16113349},
  doi = {10.1007/978-3-319-93317-7_7},
  abstract = {In model-driven engineering, model transformation (MT) verification is essential for reliably producing software artifacts. While recent advancements have enabled automatic Hoare-style verification for non-trivial MTs, there are certain verification tasks (e.g. induction) that are intrinsically difficult to automate. Existing tools that aim at simplifying the interactive verification of MTs typically translate the MT specification (e.g. in ATL) and properties to prove (e.g. in OCL) into an interactive theorem prover. However, since the MT specification and proof phases happen in separate languages, the proof developer needs a deep knowledge of the translation logic. Naturally any error in the MT translation could cause unsound verification, i.e. the MT executed in the original environment may have different semantics from the verified MT. We propose an alternative solution by designing and implementing an internal domain specific language, namely CoqTL, for the specification of declarative MTs directly in the Coq interactive theorem prover. Expressions in CoqTL are written in Gallina (the specification language of Coq), increasing the possibilities of reuse of native Coq libraries in the transformation definition and proof. In this paper we introduce CoqTL, we evaluate its practical applicability on a case study, and identify its limitations.},
  copyright = {All rights reserved},
  isbn = {978-3-319-93316-0},
  keywords = {c2r,Coq,coqtl,Interactive theorem proving,Model transformation,Model-driven engineering,my-conference},
  file = {/Users/max/Zotero/storage/4AT3U62E/Tisi and Cheng - 2018 - CoqTL An internal DSL for model transformation in.pdf}
}

@inproceedings{tisiTwinDrivenEngineeringOverview2021,
  title = {Towards {{Twin-Driven Engineering}}: {{Overview}} of the {{State-of-The-Art}} and {{Research Directions}}},
  shorttitle = {Towards {{Twin-Driven Engineering}}},
  booktitle = {Advances in {{Production Management Systems}}. {{Artificial Intelligence}} for {{Sustainable}} and {{Resilient Production Systems}}},
  author = {Tisi, Massimo and Bruneliere, Hugo and {de Lara}, Juan and Di Ruscio, Davide and Kolovos, Dimitris},
  editor = {Dolgui, Alexandre and Bernard, Alain and Lemoine, David and {von Cieminski}, Gregor and Romero, David},
  year = {2021},
  volume = {630},
  pages = {351--359},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-85874-2_37},
  urldate = {2022-05-07},
  abstract = {Cyber-Physical Systems (CPS) are complex physical systems interacting with a considerable number of distributed computing elements for monitoring, control and management. They are currently becoming larger as CyberPhysical Systems of Systems (CPSoS), since many industrial companies are transitioning their complex systems of systems to software-intensive solutions in different domains such as production or manufacturing. Following the development and dissemination of DevOps approaches in the Software Engineering world, we propose the Twin-Driven Engineering (TDE) paradigm as a way to upgrade the role of Digital Twins (DT) to become a central point in all the engineering activities on the CPSoS, from design to decommissioning. Since CPSoS can be highly heterogeneous, we rather target the support for producing and maintaining a single integrated virtual representation of the CPSoS (i.e. a System of Twins) on which it is possible to perform global reasoning, analysis and verification. However, such a new paradigm comes with several open research challenges. We provide an overview of the state-of-the-art in key areas related to TDE. We identify under-investigated problems in related work and outline corresponding research directions.},
  copyright = {All rights reserved},
  isbn = {978-3-030-85873-5 978-3-030-85874-2},
  langid = {english},
  keywords = {cps,Cyber-Physical Systems,my-conference,Research Directions,State-of-the-Art,Systems of Systems,Twin-Driven Engineering},
  file = {/Users/max/Zotero/storage/MGGGFWDP/Tisi et al. - 2021 - Towards Twin-Driven Engineering Overview of the S.pdf;/Users/max/Zotero/storage/SA55QT63/Tisi et al. - 2021 - Towards Twin-Driven Engineering Overview of the S.pdf}
}

@inproceedings{Wagelaar2011,
  title = {Towards a General Composition Semantics for Rule-Based Model Transformation},
  booktitle = {Model {{Driven Engineering Languages}} and {{Systems}}: 14th {{International Conference}}, {{MODELS}} 2011, {{Wellington}}, {{New Zealand}}, {{October}} 16-21, 2011. {{Proceedings}}},
  author = {Wagelaar, D and Tisi, M and Cabot, J and Jouault, F},
  year = {2011},
  urldate = {2013-02-08},
  copyright = {All rights reserved},
  keywords = {atl,my-conference,no-example},
  file = {/Users/max/Zotero/storage/L4MBRE5R/Wagelaar et al. - 2011 - Towards a general composition semantics for rule-based model transformation.pdf}
}
